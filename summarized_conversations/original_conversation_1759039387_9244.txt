{'role': 'assistant', 'content': 'Now let\'s create the search controller:\n\n<function_calls>\n<create-file file_path="backend/controllers/searchController.js">\nconst Superstar = require(\'../models/Superstar\');\nconst Championship = require(\'../models/Championship\');\n\n// Search across all content (superstars, championships)\nexports.searchAll = async (req, res) => {\n  try {\n    const query = req.query.q;\n    \n    if (!query) {\n      return res.status(400).json({ message: \'Search query is required\' });\n    }\n    \n    // Search superstars\n    const superstars = await Superstar.find(\n      { $text: { $search: query } },\n      { score: { $meta: "textScore" } }\n    )\n    .select(\'name nickname brand gender imageUrl thumbnailUrl\')\n    .sort({ score: { $meta: "textScore" } })\n    .limit(10);\n    \n    // Search championships\n    const championships = await Championship.find(\n      { $text: { $search: query } },\n      { score: { $meta: "textScore" } }\n    )\n    .select(\'name type brand imageUrl thumbnailUrl\')\n    .sort({ score: { $meta: "textScore" } })\n    .limit(5);\n    \n    // Combine results\n    const results = {\n      superstars: superstars,\n      championships: championships\n    };\n    \n    res.json(results);\n  } catch (err) {\n    console.error(\'Error searching content:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Search superstars\nexports.searchSuperstars = async (req, res) => {\n  try {\n    const query = req.query.q;\n    \n    if (!query) {\n      return res.status(400).json({ message: \'Search query is required\' });\n    }\n    \n    // Search superstars\n    const superstars = await Superstar.find(\n      { $text: { $search: query } },\n      { score: { $meta: "textScore" } }\n    )\n    .select(\'name nickname brand gender imageUrl thumbnailUrl\')\n    .sort({ score: { $meta: "textScore" } })\n    .limit(20);\n    \n    res.json(superstars);\n  } catch (err) {\n    console.error(\'Error searching superstars:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Search championships\nexports.searchChampionships = async (req, res) => {\n  try {\n    const query = req.query.q;\n    \n    if (!query) {\n      return res.status(400).json({ message: \'Search query is required\' });\n    }\n    \n    // Search championships\n    const championships = await Championship.find(\n      { $text: { $search: query } },\n      { score: { $meta: "textScore" } }\n    )\n    .select(\'name type brand imageUrl thumbnailUrl\')\n    .sort({ score: { $meta: "textScore" } })\n    .limit(10);\n    \n    res.json(championships);\n  } catch (err) {\n    console.error(\'Error searching championships:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Advanced search with filters\nexports.advancedSearch = async (req, res) => {\n  try {\n    const { query, filters } = req.body;\n    \n    if (!query && !filters) {\n      return res.status(400).json({ message: \'Search query or filters are required\' });\n    }\n    \n    let searchQuery = {};\n    \n    // Add text search if query is provided\n    if (query) {\n      searchQuery.$text = { $search: query };\n    }\n    \n    // Add filters if provided\n    if (filters) {\n      // Brand filter\n      if (filters.brand) {\n        searchQuery.brand = filters.brand;\n      }\n      \n      // Gender filter\n      if (filters.gender) {\n        searchQuery.gender = filters.gender;\n      }\n      \n      // Championship filter (current champions only)\n      if (filters.isChampion) {\n        searchQuery[\'championships.currentChampion\'] = true;\n      }\n      \n      // Active/inactive filter\n      if (filters.isActive !== undefined) {\n        searchQuery.isActive = filters.isActive;\n      }\n      \n      // Injured filter\n      if (filters.isInjured !== undefined) {\n        searchQuery.isInjured = filters.isInjured;\n      }\n    }\n    \n    // Execute search\n    const superstars = await Superstar.find(searchQuery)\n      .select(\'name nickname brand gender imageUrl thumbnailUrl isActive isInjured\')\n      .sort(query ? { score: { $meta: "textScore" } } : { name: 1 })\n      .limit(50);\n    \n    res.json(superstars);\n  } catch (err) {\n    console.error(\'Error performing advanced search:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n</create-file>\n</function_calls>'}