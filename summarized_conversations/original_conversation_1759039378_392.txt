{'role': 'assistant', 'content': 'Now let\'s create the main JavaScript file for our website:\n\n<function_calls>\n<create-file file_path="src/assets/js/main.js">\n// DOM Elements\ndocument.addEventListener(\'DOMContentLoaded\', function() {\n    // Mobile Menu Toggle\n    const mobileMenuBtn = document.querySelector(\'.mobile-menu-btn\');\n    const navMenu = document.querySelector(\'.nav-menu\');\n    \n    if (mobileMenuBtn) {\n        mobileMenuBtn.addEventListener(\'click\', function() {\n            navMenu.classList.toggle(\'active\');\n        });\n    }\n    \n    // Search Functionality\n    const searchForm = document.querySelector(\'.search-form\');\n    const searchInput = document.querySelector(\'.search-input\');\n    const searchResults = document.querySelector(\'.search-results\');\n    \n    if (searchForm) {\n        searchForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n            const searchTerm = searchInput.value.trim().toLowerCase();\n            \n            if (searchTerm.length < 2) {\n                searchResults.innerHTML = \'<p>Please enter at least 2 characters to search.</p>\';\n                return;\n            }\n            \n            // Call the search API\n            fetchSearchResults(searchTerm);\n        });\n    }\n    \n    // Animation on scroll\n    const animatedElements = document.querySelectorAll(\'.animate-on-scroll\');\n    \n    if (animatedElements.length > 0) {\n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    const element = entry.target;\n                    const animation = element.dataset.animation || \'fade-in\';\n                    element.classList.add(animation);\n                    observer.unobserve(element);\n                }\n            });\n        }, { threshold: 0.1 });\n        \n        animatedElements.forEach(element => {\n            observer.observe(element);\n        });\n    }\n    \n    // Championship tabs\n    const championshipTabs = document.querySelectorAll(\'.championship-tab\');\n    const championshipContents = document.querySelectorAll(\'.championship-content\');\n    \n    if (championshipTabs.length > 0) {\n        championshipTabs.forEach(tab => {\n            tab.addEventListener(\'click\', function() {\n                const target = this.dataset.target;\n                \n                // Remove active class from all tabs and contents\n                championshipTabs.forEach(tab => tab.classList.remove(\'active\'));\n                championshipContents.forEach(content => content.classList.remove(\'active\'));\n                \n                // Add active class to clicked tab and corresponding content\n                this.classList.add(\'active\');\n                document.querySelector(`.championship-content[data-id="${target}"]`).classList.add(\'active\');\n            });\n        });\n    }\n});\n\n// Fetch search results from API\nasync function fetchSearchResults(searchTerm) {\n    const searchResults = document.querySelector(\'.search-results\');\n    \n    try {\n        searchResults.innerHTML = \'<p>Searching...</p>\';\n        \n        // In a real implementation, this would be an API call\n        // For now, we\'ll simulate a delay and return mock data\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        // Mock data - in real implementation, this would come from the API\n        const results = superstarData.filter(superstar => \n            superstar.name.toLowerCase().includes(searchTerm) || \n            superstar.nickname.toLowerCase().includes(searchTerm) ||\n            superstar.brand.toLowerCase().includes(searchTerm)\n        );\n        \n        if (results.length === 0) {\n            searchResults.innerHTML = \'<p>No results found. Try a different search term.</p>\';\n            return;\n        }\n        \n        // Display results\n        let resultsHTML = \'<h3>Search Results</h3><div class="superstars-grid">\';\n        \n        results.forEach(superstar => {\n            resultsHTML += `\n                <div class="superstar-card">\n                    <img src="${superstar.image}" alt="${superstar.name}" class="superstar-image">\n                    <div class="superstar-info">\n                        <h3 class="superstar-name">${superstar.name}</h3>\n                        <p class="superstar-brand">${superstar.brand}</p>\n                        <a href="pages/superstar.html?id=${superstar.id}" class="btn">View Profile</a>\n                    </div>\n                </div>\n            `;\n        });\n        \n        resultsHTML += \'</div>\';\n        searchResults.innerHTML = resultsHTML;\n        \n    } catch (error) {\n        console.error(\'Error fetching search results:\', error);\n        searchResults.innerHTML = \'<p>An error occurred while searching. Please try again later.</p>\';\n    }\n}\n\n// Mock data for search functionality\n// In a real implementation, this would come from the API\nconst superstarData = [\n    {\n        id: 1,\n        name: "Cody Rhodes",\n        nickname: "The American Nightmare",\n        brand: "SmackDown",\n        image: "../assets/images/superstars/cody-rhodes.jpg"\n    },\n    {\n        id: 2,\n        name: "Seth Rollins",\n        nickname: "The Visionary",\n        brand: "Raw",\n        image: "../assets/images/superstars/seth-rollins.jpg"\n    },\n    {\n        id: 3,\n        name: "Becky Lynch",\n        nickname: "The Man",\n        brand: "Raw",\n        image: "../assets/images/superstars/becky-lynch.jpg"\n    },\n    {\n        id: 4,\n        name: "Tiffany Stratton",\n        nickname: "The Center of the Universe",\n        brand: "SmackDown",\n        image: "../assets/images/superstars/tiffany-stratton.jpg"\n    }\n];\n\n// Function to load superstar profile data\nfunction loadSuperstarProfile() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const superstarId = urlParams.get(\'id\');\n    \n    if (!superstarId) {\n        document.querySelector(\'.profile-container\').innerHTML = \'<p>Superstar not found.</p>\';\n        return;\n    }\n    \n    // In a real implementation, this would be an API call\n    // For now, we\'ll use the mock data\n    const superstar = superstarData.find(s => s.id === parseInt(superstarId));\n    \n    if (!superstar) {\n        document.querySelector(\'.profile-container\').innerHTML = \'<p>Superstar not found.</p>\';\n        return;\n    }\n    \n    // Update page title\n    document.title = `${superstar.name} - WWE Access Organization`;\n    \n    // Update profile header\n    document.querySelector(\'.profile-image\').src = superstar.image;\n    document.querySelector(\'.profile-name\').textContent = superstar.name;\n    document.querySelector(\'.profile-nickname\').textContent = superstar.nickname;\n    \n    // Additional profile data would be populated here\n}\n</create-file>\n</function_calls>'}