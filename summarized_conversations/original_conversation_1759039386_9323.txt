{'role': 'assistant', 'content': 'Now let\'s create the controllers for our API:\n\n<function_calls>\n<create-file file_path="backend/controllers/championController.js">\nconst Championship = require(\'../models/Championship\');\nconst Superstar = require(\'../models/Superstar\');\n\n// Get all championships\nexports.getAllChampionships = async (req, res) => {\n  try {\n    const championships = await Championship.find()\n      .populate(\'currentChampion.superstar\', \'name imageUrl brand\')\n      .populate(\'currentChampion.team\', \'name imageUrl brand\')\n      .sort({ type: 1, brand: 1 });\n    \n    res.json(championships);\n  } catch (err) {\n    console.error(\'Error fetching championships:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Get championship by ID\nexports.getChampionshipById = async (req, res) => {\n  try {\n    const championship = await Championship.findById(req.params.id)\n      .populate(\'currentChampion.superstar\', \'name imageUrl brand nickname\')\n      .populate(\'currentChampion.team\', \'name imageUrl brand nickname\')\n      .populate(\'previousChampions.superstar\', \'name imageUrl\')\n      .populate(\'previousChampions.team\', \'name imageUrl\');\n    \n    if (!championship) {\n      return res.status(404).json({ message: \'Championship not found\' });\n    }\n    \n    res.json(championship);\n  } catch (err) {\n    console.error(\'Error fetching championship:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Get championships by type\nexports.getChampionshipsByType = async (req, res) => {\n  try {\n    const championships = await Championship.find({ type: req.params.type })\n      .populate(\'currentChampion.superstar\', \'name imageUrl brand\')\n      .populate(\'currentChampion.team\', \'name imageUrl brand\')\n      .sort({ brand: 1 });\n    \n    res.json(championships);\n  } catch (err) {\n    console.error(\'Error fetching championships by type:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Get championships by brand\nexports.getChampionshipsByBrand = async (req, res) => {\n  try {\n    const championships = await Championship.find({ brand: req.params.brand })\n      .populate(\'currentChampion.superstar\', \'name imageUrl\')\n      .populate(\'currentChampion.team\', \'name imageUrl\')\n      .sort({ type: 1 });\n    \n    res.json(championships);\n  } catch (err) {\n    console.error(\'Error fetching championships by brand:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Get current champion for a specific championship\nexports.getCurrentChampion = async (req, res) => {\n  try {\n    const championship = await Championship.findById(req.params.id)\n      .select(\'currentChampion\')\n      .populate(\'currentChampion.superstar\', \'name imageUrl brand nickname bio\')\n      .populate(\'currentChampion.team\', \'name imageUrl brand nickname bio\');\n    \n    if (!championship) {\n      return res.status(404).json({ message: \'Championship not found\' });\n    }\n    \n    res.json(championship.currentChampion);\n  } catch (err) {\n    console.error(\'Error fetching current champion:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Get championship history\nexports.getChampionshipHistory = async (req, res) => {\n  try {\n    const championship = await Championship.findById(req.params.id)\n      .select(\'previousChampions currentChampion\')\n      .populate(\'previousChampions.superstar\', \'name imageUrl\')\n      .populate(\'previousChampions.team\', \'name imageUrl\')\n      .populate(\'currentChampion.superstar\', \'name imageUrl\')\n      .populate(\'currentChampion.team\', \'name imageUrl\');\n    \n    if (!championship) {\n      return res.status(404).json({ message: \'Championship not found\' });\n    }\n    \n    // Combine current champion with previous champions for a complete history\n    const history = {\n      current: championship.currentChampion,\n      previous: championship.previousChampions\n    };\n    \n    res.json(history);\n  } catch (err) {\n    console.error(\'Error fetching championship history:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Create a new championship (admin only)\nexports.createChampionship = async (req, res) => {\n  try {\n    const newChampionship = new Championship(req.body);\n    const championship = await newChampionship.save();\n    \n    res.status(201).json(championship);\n  } catch (err) {\n    console.error(\'Error creating championship:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Update championship details (admin only)\nexports.updateChampionship = async (req, res) => {\n  try {\n    const championship = await Championship.findByIdAndUpdate(\n      req.params.id,\n      req.body,\n      { new: true, runValidators: true }\n    );\n    \n    if (!championship) {\n      return res.status(404).json({ message: \'Championship not found\' });\n    }\n    \n    res.json(championship);\n  } catch (err) {\n    console.error(\'Error updating championship:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Update current champion (admin only)\nexports.updateCurrentChampion = async (req, res) => {\n  try {\n    const championship = await Championship.findById(req.params.id);\n    \n    if (!championship) {\n      return res.status(404).json({ message: \'Championship not found\' });\n    }\n    \n    // If there\'s a current champion, move them to previous champions\n    if (championship.currentChampion.superstar || \n        (championship.currentChampion.isTeam && championship.currentChampion.team.length > 0)) {\n      \n      const currentDate = new Date();\n      const wonDate = championship.currentChampion.wonDate;\n      const reignDays = Math.floor((currentDate - wonDate) / (1000 * 60 * 60 * 24));\n      \n      const previousChampion = {\n        superstar: championship.currentChampion.superstar,\n        team: championship.currentChampion.team,\n        isTeam: championship.currentChampion.isTeam,\n        reignNumber: championship.currentChampion.reignNumber,\n        wonDate: championship.currentChampion.wonDate,\n        wonEvent: championship.currentChampion.wonEvent,\n        lostDate: currentDate,\n        lostEvent: req.body.wonEvent,\n        reignDays: reignDays\n      };\n      \n      championship.previousChampions.unshift(previousChampion);\n    }\n    \n    // Update with new champion\n    championship.currentChampion = req.body;\n    championship.currentChampion.wonDate = new Date();\n    championship.currentChampion.reignDays = 0;\n    \n    await championship.save();\n    \n    res.json(championship);\n  } catch (err) {\n    console.error(\'Error updating current champion:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Delete a championship (admin only)\nexports.deleteChampionship = async (req, res) => {\n  try {\n    const championship = await Championship.findByIdAndDelete(req.params.id);\n    \n    if (!championship) {\n      return res.status(404).json({ message: \'Championship not found\' });\n    }\n    \n    res.json({ message: \'Championship deleted successfully\' });\n  } catch (err) {\n    console.error(\'Error deleting championship:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n</create-file>\n</function_calls>'}