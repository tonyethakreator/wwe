{'role': 'assistant', 'content': 'Now let\'s create a backend structure to handle the data for our website. First, let\'s create a server.js file:\n\n<function_calls>\n<create-file file_path="backend/server.js">\nconst express = require(\'express\');\nconst cors = require(\'cors\');\nconst path = require(\'path\');\nconst mongoose = require(\'mongoose\');\nconst championRoutes = require(\'./routes/championRoutes\');\nconst superstarRoutes = require(\'./routes/superstarRoutes\');\nconst searchRoutes = require(\'./routes/searchRoutes\');\nconst config = require(\'./config/config\');\n\n// Initialize Express app\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Serve static files from the \'src\' directory\napp.use(express.static(path.join(__dirname, \'../src\')));\n\n// API Routes\napp.use(\'/api/champions\', championRoutes);\napp.use(\'/api/superstars\', superstarRoutes);\napp.use(\'/api/search\', searchRoutes);\n\n// Serve the main HTML file for all routes (for client-side routing)\napp.get(\'*\', (req, res) => {\n  res.sendFile(path.join(__dirname, \'../src/index.html\'));\n});\n\n// Connect to MongoDB\nmongoose.connect(config.mongoURI)\n  .then(() => {\n    console.log(\'MongoDB connected successfully\');\n    // Start the server\n    app.listen(PORT, () => {\n      console.log(`Server running on port ${PORT}`);\n    });\n  })\n  .catch(err => {\n    console.error(\'MongoDB connection error:\', err);\n  });\n\nmodule.exports = app;\n</create-file>\n</function_calls>'}