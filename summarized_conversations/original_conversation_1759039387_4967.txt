{'role': 'assistant', 'content': 'Now let\'s create the superstar controller:\n\n<function_calls>\n<create-file file_path="backend/controllers/superstarController.js">\nconst Superstar = require(\'../models/Superstar\');\nconst Championship = require(\'../models/Championship\');\n\n// Get all superstars\nexports.getAllSuperstars = async (req, res) => {\n  try {\n    const superstars = await Superstar.find()\n      .select(\'name nickname brand gender imageUrl thumbnailUrl isActive isInjured\')\n      .sort({ brand: 1, name: 1 });\n    \n    res.json(superstars);\n  } catch (err) {\n    console.error(\'Error fetching superstars:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Get superstar by ID\nexports.getSuperstarById = async (req, res) => {\n  try {\n    const superstar = await Superstar.findById(req.params.id)\n      .populate(\'championships.title\', \'name imageUrl thumbnailUrl\');\n    \n    if (!superstar) {\n      return res.status(404).json({ message: \'Superstar not found\' });\n    }\n    \n    res.json(superstar);\n  } catch (err) {\n    console.error(\'Error fetching superstar:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Get superstars by brand\nexports.getSuperstarsByBrand = async (req, res) => {\n  try {\n    const superstars = await Superstar.find({ brand: req.params.brand })\n      .select(\'name nickname brand gender imageUrl thumbnailUrl isActive isInjured\')\n      .sort({ name: 1 });\n    \n    res.json(superstars);\n  } catch (err) {\n    console.error(\'Error fetching superstars by brand:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Get superstars by gender\nexports.getSuperstarsByGender = async (req, res) => {\n  try {\n    const superstars = await Superstar.find({ gender: req.params.gender })\n      .select(\'name nickname brand gender imageUrl thumbnailUrl isActive isInjured\')\n      .sort({ brand: 1, name: 1 });\n    \n    res.json(superstars);\n  } catch (err) {\n    console.error(\'Error fetching superstars by gender:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Get current champions\nexports.getCurrentChampions = async (req, res) => {\n  try {\n    // Find all championships\n    const championships = await Championship.find()\n      .populate(\'currentChampion.superstar\', \'name nickname brand gender imageUrl\')\n      .populate(\'currentChampion.team\', \'name nickname brand gender imageUrl\');\n    \n    // Extract current champions\n    const champions = championships.map(championship => {\n      return {\n        championship: {\n          id: championship._id,\n          name: championship.name,\n          type: championship.type,\n          brand: championship.brand,\n          imageUrl: championship.thumbnailUrl\n        },\n        isTeam: championship.currentChampion.isTeam,\n        superstar: championship.currentChampion.superstar,\n        team: championship.currentChampion.team,\n        reignNumber: championship.currentChampion.reignNumber,\n        wonDate: championship.currentChampion.wonDate,\n        wonEvent: championship.currentChampion.wonEvent,\n        reignDays: championship.currentChampion.reignDays\n      };\n    });\n    \n    res.json(champions);\n  } catch (err) {\n    console.error(\'Error fetching current champions:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Get superstar championships history\nexports.getSuperstarChampionships = async (req, res) => {\n  try {\n    const superstar = await Superstar.findById(req.params.id)\n      .select(\'championships\')\n      .populate(\'championships.title\', \'name imageUrl thumbnailUrl type brand\');\n    \n    if (!superstar) {\n      return res.status(404).json({ message: \'Superstar not found\' });\n    }\n    \n    // Also find championships where this superstar appears in previousChampions\n    const championships = await Championship.find({\n      $or: [\n        { \'previousChampions.superstar\': req.params.id },\n        { \'previousChampions.team\': req.params.id }\n      ]\n    }).select(\'name type brand previousChampions\');\n    \n    // Extract championship history\n    const history = championships.map(championship => {\n      const reigns = championship.previousChampions.filter(reign => {\n        if (reign.isTeam) {\n          return reign.team.some(member => member.toString() === req.params.id);\n        } else {\n          return reign.superstar && reign.superstar.toString() === req.params.id;\n        }\n      });\n      \n      return {\n        championship: {\n          id: championship._id,\n          name: championship.name,\n          type: championship.type,\n          brand: championship.brand\n        },\n        reigns: reigns\n      };\n    }).filter(item => item.reigns.length > 0);\n    \n    // Combine current and previous championship data\n    const result = {\n      current: superstar.championships.filter(c => c.currentChampion),\n      history: history\n    };\n    \n    res.json(result);\n  } catch (err) {\n    console.error(\'Error fetching superstar championships:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Get related superstars (same brand, tag partners, rivals)\nexports.getRelatedSuperstars = async (req, res) => {\n  try {\n    const superstar = await Superstar.findById(req.params.id);\n    \n    if (!superstar) {\n      return res.status(404).json({ message: \'Superstar not found\' });\n    }\n    \n    // Find superstars from the same brand\n    const sameBrand = await Superstar.find({ \n      _id: { $ne: req.params.id },\n      brand: superstar.brand \n    })\n    .select(\'name nickname brand gender imageUrl thumbnailUrl\')\n    .limit(6);\n    \n    // TODO: In a real implementation, we would also find tag partners and rivals\n    // based on a relationship model or match history\n    \n    const related = {\n      sameBrand: sameBrand,\n      tagPartners: [], // Placeholder for tag partners\n      rivals: [] // Placeholder for rivals\n    };\n    \n    res.json(related);\n  } catch (err) {\n    console.error(\'Error fetching related superstars:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Create a new superstar (admin only)\nexports.createSuperstar = async (req, res) => {\n  try {\n    const newSuperstar = new Superstar(req.body);\n    const superstar = await newSuperstar.save();\n    \n    res.status(201).json(superstar);\n  } catch (err) {\n    console.error(\'Error creating superstar:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Update superstar details (admin only)\nexports.updateSuperstar = async (req, res) => {\n  try {\n    const superstar = await Superstar.findByIdAndUpdate(\n      req.params.id,\n      req.body,\n      { new: true, runValidators: true }\n    );\n    \n    if (!superstar) {\n      return res.status(404).json({ message: \'Superstar not found\' });\n    }\n    \n    res.json(superstar);\n  } catch (err) {\n    console.error(\'Error updating superstar:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n\n// Delete a superstar (admin only)\nexports.deleteSuperstar = async (req, res) => {\n  try {\n    const superstar = await Superstar.findByIdAndDelete(req.params.id);\n    \n    if (!superstar) {\n      return res.status(404).json({ message: \'Superstar not found\' });\n    }\n    \n    res.json({ message: \'Superstar deleted successfully\' });\n  } catch (err) {\n    console.error(\'Error deleting superstar:\', err);\n    res.status(500).json({ message: \'Server error\' });\n  }\n};\n</create-file>\n</function_calls>'}